// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/** A library of commonly used mathematical functions.
 *  All functions runs in O(n), where n is the number of bits used
 *  for representing a two's complement integer value (16 in the Hack computer). 
 *  Note: Jack compilers implement multiplication and division
 *  using calls to OS functions in this class.
 */
class Math {
    static int n, halfN;             // Number of bits used for representing a two's complement integer
    static Array powersOfTwo; // Stores 2^0, 2^1, 2^2,..., 2^(n-1)
    static int twoQY;

    // Initializes the Math library.
    function void init() {
        var int i, val;

        let n = 16;
        let halfN = 8;
        let twoQY = 0;
        let powersOfTwo = Array.new(n);

        let i = 0;
        let val = 1;
        while (i < n) {
            let powersOfTwo[i] = val;
            let val = val + val;
            let i = i + 1;
        }

        return;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*'
     *  in an expression, it handles it by invoking this method. 
     *  Thus, in Jack, x * y and Math.multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum, shiftedx, powersOfTwo, i;

        if (x = y) {
            return Math.square(x);
        }

        let sum = 0;
        let shiftedx = x;
        let powersOfTwo = 1;

        let i = 0;
        while (i < n) {
            if ((y & powersOfTwo) = powersOfTwo) {
                let sum = sum + shiftedx;
            }
            let shiftedx = shiftedx + shiftedx;
            let powersOfTwo = powersOfTwo + powersOfTwo;
            let i = i + 1;
        }

        return sum;
    }

    function int square(int x) {
        var int sum, end, i;

        if (x < 0) {
            let x = -x;
        }
        if ((x < 2)) {
            return x;
        }

        let sum = 0;
        let end = x + x - 1;
        let i = 1;
        while (~(i > end)) {
            let sum = sum + i;
            let i = i + 2;
        }
        return sum;
    }

    function int bit(int x, int i) {
        return ((x & powersOfTwo[i]) = powersOfTwo[i]);
    }

    /** Returns the integer part of x / y.
     *  When a Jack compiler detects the division operator '/'
     *  an an expression, it handles it by invoking this method.
     *  Thus, x/y and Math.divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int ax, ay, ret;

        if (y = 0) {
            do Sys.error(3);
            return -1;
        }

        let ax = Math.abs(x);
        let ay = Math.abs(y);
        let ret = Math._divide(ax, ay);

        if (((x < 0) & (y > 0)) | ((x > 0) & (y < 0))) {
            return -ret;
        } else {
            return ret;
        }
    }

    function int _divide(int x, int y) {
        var int q, ret;

        if (y > x | y < 0) {
            let twoQY = 0;
            return 0;
        }

        let q = Math._divide(x, (y + y));

        if ((x - twoQY) < y) {
            let ret = q + q;
        } else {
            let twoQY = twoQY + y;
            let ret = q + q + 1;
        }

        return ret;
    }

    /** Returns the integer part of the square root of x.
    */
    function int sqrt(int x) {
        var int y, i, tmp, square;

        if (x < 0) {
            do Sys.error(4);
            return -1;
        }

        let y = 0;
        let i = halfN - 1;
        while (i > (-1)) {
            let tmp = y + powersOfTwo[i];
            let square = Math.square(tmp);
            if (((square < x) | (square = x)) & (square > 0)) {
                let y = y + powersOfTwo[i];
            }
            let i = i - 1;
        }

        return y;
    }

    /** Returns the greater value.
    */
    function int max(int a, int b) {
        if ((a > b) | (a = b)) {
            return a;
        } else {
            return b;
        }
    }

    /** Returns the smaller value.
    */
    function int min(int a, int b) {
        if ((a < b) | (a = b)) {
            return a;
        } else {
            return b;
        }
    }

    /** Returns the absolute value of x
    */
    function int abs(int x) {
        if (x < 0) {
            return -x;
        } else {
            return x;
        }
    }
}
