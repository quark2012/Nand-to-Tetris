// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array str;
    field int length, maxLength;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int max) {
        if (max < 0) {
            do Sys.error(14);
            return this;
        }
        if (max > 0) {
            let str = Array.new(max);
        } else {
            let str = null;
        }
        let maxLength = max;
        let length = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        if (~(str = null)) {
            do str.dispose();
        }
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        if ((j < 0) | (j > length) | (j = length)) {
            do Sys.error(15);
            return 0;
        } else {
            return str[j];
        }
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        if ((j < 0) | (j > length) | (j = length)) {
            do Sys.error(16);
        } else {
            let str[j] = c;
        }
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (length < maxLength) {
            let str[length] = c;
            let length = length + 1;
        } else {
            do Sys.error(17);
        }
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (length > 0) {
            let length = length - 1;
        } else {
            do Sys.error(18);
        }
        return;
    }

    function int multiplyByTen(int x) {
        var int v2x, v4x, v8x;
        let v2x = x + x;
        let v4x = v2x + v2x;
        let v8x = v4x + v4x;
        return (v8x + v2x);
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int val, i;
        var boolean negative;
        let val = 0;
        let negative = false;
        let i = 0;
        while (i < length) {
            if ((i = 0) & (str[i] = 45)) {
                // check for minus sign
                let negative = true;
            } else {
                if ((str[i] < 48) | (str[i] > 57)) {
                    // exit while loop fast
                    let i = length;
                }
                if ((str[i] > 47) & (str[i] < 58)) {
                    let val = str[i] - 48 + String.multiplyByTen(val);
                }
            }
            let i = i + 1;
        }

        if (negative) {
            let val = -val;
        }
        return val;
    }

    method boolean canFit(int val) {
        var int sizeRequired;
        let sizeRequired = 0;
        if (val < 0) {
            let sizeRequired = sizeRequired + 1;
            let val = -val;
        }

        if (val < 10) { // 1 digit
            let sizeRequired = sizeRequired + 1;
        }
        if ((val > 9) & (val < 100)) { // 2 digits
            let sizeRequired = sizeRequired + 2;
        }
        if ((val > 99) & (val < 1000)) { // 3 digits
            let sizeRequired = sizeRequired + 3;
        }
        if ((val > 999) & (val < 10000)) { // 4 digits
            let sizeRequired = sizeRequired + 4;
        }
        if (val > 9999) { /// 5 digits
            let sizeRequired = sizeRequired + 5;
        }

        return ~(maxLength < sizeRequired);
    }

    method void intToStr(int val) {
        var int start, end, index, factor;

        if (val < 10) { // 1 digit
            do appendChar(val + 48);
            return;
        }

        // 9, 100
        // 99, 1000 => +90, +900
        // 999, 10000 => +900, +9000
        if ((val > 9) & (val < 100)) { // 2 digits
            let index = 1;
            let factor = 10;
            let start = factor;
            while (index < 10) {
                // 9-20, 19-30, ... 89-100
                if ((val > (start - 1)) & (val < (start + factor))) { // 10-19, 20-29, ... 90-99
                    do appendChar(index + 48);
                    do intToStr(val - start);
                    return;
                }
                let index = index + 1;
                let start = start + factor;
            }
        }

        if ((val > 99) & (val < 1000)) { // 3 digits
            let index = 1;
            let factor = 100;
            let start = factor;
            while (index < 10) {
                // 99-200, 199-300, ... 899-1000
                if ((val > (start - 1)) & (val < (start + factor))) { // 100-199, 200-299, ... 900-999
                    do appendChar(index + 48);
                    do intToStr(val - start);
                    return;
                }
                let index = index + 1;
                let start = start + factor;
            }
        }

        if ((val > 999) & (val < 10000)) { // 4 digits
            let index = 1;
            let factor = 1000;
            let start = factor;
            while (index < 10) {
                // 999-2000, 1999-3000, ... 8999-10000
                if ((val > (start - 1)) & (val < (start + factor))) { // 1000-1999, 2000-2999, ... 9000-9999
                    do appendChar(index + 48);
                    do intToStr(val - start);
                    return;
                }
                let index = index + 1;
                let start = start + factor;
            }
        }

        if (val > 9999) { /// 5 digits
            let index = 1;
            let factor = 10000;
            let start = factor;
            if (val > 29999) {
                do appendChar(3 + 48);
                do intToStr(val - 30000);
                return;
            }
            while (index < 3) {
                // 9999-20000, 19999-30000, 29999-
                if ((val > (start - 1)) & (val < (start + factor))) { // 10000-19999, 20000-29999, ... 90000-99999
                    do appendChar(index + 48);
                    do intToStr(val - start);
                    return;
                }
                let index = index + 1;
                let start = start + factor;
            }
        }

        return;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        if (~canFit(val)) {
            do Sys.error(19);
            return;
        }

        let length = 0; // reset the string
        if (val < 0) { // if negative, change to positive
            do appendChar(45);
            if (val = ((-32767) - 1)) {
                do appendChar(51);
                do appendChar(50);
                do appendChar(55);
                do appendChar(54);
                do appendChar(56);
                return;
            }
            let val = -val;
        }
        do intToStr(val);
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
