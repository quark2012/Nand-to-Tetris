// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    // 15   14 13   12  11 10 9 8 7 6   5 4 3   2 1 0
    // i    xx      a   cccccc          ddd     jjj
    // 0    01      1   000000          111     001

    // if a instruction (instruction[15] = 0), load from instruction, else ALU
    Mux16 (a=instruction, b=aluaregister, sel=instruction[15], out=muxaregister);

    // if c instruction (instruction[15] = 1), instruction 5 (update A) is active
    And (a=instruction[15], b=instruction[5], out=instruction5);

    // if !(a instruction) or instruction 5, load A
    Not (in=instruction[15], out=notinstruction15);
    Or (a=instruction5, b=notinstruction15, out=loadaregister);

    ARegister (in=muxaregister, load=loadaregister, out=aregistermux, out=aregisterpc, out[0..14]=addressM);

    // if c instruction (instruction[15] = 1), instruction 4 (update D) is active
    And (a=instruction[15], b=instruction[4], out=instruction4);
    DRegister (in=aludregister, load=instruction4, out=dregister);

    // if c instruction (instruction[15] = 1), instruction 12 (y is A or M) is active
    And (a=instruction[15], b=instruction[12], out=instruction12);
    Mux16 (a=aregistermux, b=inM, sel=instruction12, out=muxy);

    // if c instruction (instruction[15] = 1), instruction 6-11 (ALU comp) is active
    And (a=instruction[15], b=instruction[11], out=instruction11);
    And (a=instruction[15], b=instruction[10], out=instruction10);
    And (a=instruction[15], b=instruction[9], out=instruction9);
    And (a=instruction[15], b=instruction[8], out=instruction8);
    And (a=instruction[15], b=instruction[7], out=instruction7);
    And (a=instruction[15], b=instruction[6], out=instruction6);
    ALU (x=dregister, y=muxy, zx=instruction11, nx=instruction10, zy=instruction9, ny=instruction8, f=instruction7, no=instruction6, out=aluaregister, out=aludregister, out=outM, zr=aluzero, ng=alunegative);

    // if c instruction (instruction[15] = 1), instruction 3 (update M) is active
    And (a=instruction[15], b=instruction[3], out=writeM);

    // if c instruction (instruction[15] = 1), instruction 0-2 (jump) is active
    And (a=instruction[15], b=instruction[2], out=instruction2);
    And (a=instruction[15], b=instruction[1], out=instruction1);
    And (a=instruction[15], b=instruction[0], out=instruction0);

    // if instruction 2 (out < 0) and ALU ng == 1, then jump
    And (a=instruction2, b=alunegative, out=outlessthanzero);

    // if instruction 1 (out == 0) and ALU zr == 1, then jump
    And (a=instruction1, b=aluzero, out=outequalzero);

    // if instruction 0 (out > 0) and ZLU zr == 0 and ALU ng != 1, then jump
    Not (in=aluzero, out=notaluzero);
    Not (in=alunegative, out=alupositive);
    And (a=notaluzero, b=alupositive, out=outgreaterthanzero);
    And (a=instruction0, b=outgreaterthanzero, out=outgreaterthanzeroactive);

    // if any is 1, then jump
    Or (a=outlessthanzero, b=outequalzero, out=outlessequalzero);
    Or (a=outlessequalzero, b=outgreaterthanzeroactive, out=outjump);

    // if not a instruction or !jump
    Not (in=outjump, out=notoutjump);
    Or (a=notinstruction15, b=notoutjump, out=incpc);
    PC (in=aregisterpc, load=outjump, inc=incpc, reset=reset, out[0..14]=pc);
}